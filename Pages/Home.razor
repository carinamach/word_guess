@page "/"
@using Microsoft.AspNetCore.Components.Web

<h1>🎯 Word Guess Game</h1>

<p style="font-size: 1.5rem;">@displayWord</p>

<p>Wrong guesses: @wrongGuesses / @maxWrongGuesses</p>

<input @bind="currentGuess" @bind:event="oninput" maxlength="1" placeholder="Guess a letter" @onkeydown="HandleKeyDown" />
<button @onclick="MakeGuess">Guess</button>

<p>@message</p>

<div style="margin-top:1rem">
    <h3>Guessed letters</h3>
    @if (guessedLetters.Count == 0)
    {
        <p><em>No guesses yet.</em></p>
    }
    else
    {
        <div>
            <strong>Correct:</strong>
            @foreach (var c in CorrectGuesses)
            {
                <span style="display:inline-block;margin:0.2rem;padding:0.2rem 0.5rem;background:#e6ffea;border-radius:4px;color:green;margin-right:0.25rem">@c</span>
            }
        </div>
        <div style="margin-top:0.5rem">
            <strong>Wrong:</strong>
            @foreach (var c in WrongGuessesList)
            {
                <span style="display:inline-block;margin:0.2rem;padding:0.2rem 0.5rem;background:#ffecec;border-radius:4px;color:darkred;margin-right:0.25rem">@c</span>
            }
        </div>
    }
</div>

@if (gameOver)
{
    <button @onclick="RestartGame">Play Again</button>
}

@code {
string[] wordList = { 
    "APPLE", "BANANA", "MANGO", "ORANGE", "GRAPE",
    "DOG", "CAT", "ELEPHANT", "TIGER", "LION",
    "RED", "BLUE", "GREEN", "YELLOW", "PURPLE",
    "SWEDEN", "JAPAN", "BRAZIL", "FRANCE", "CANADA",
    "CHAIR", "TABLE", "COMPUTER", "KEYBOARD", "WINDOW",
    "SUN", "MOON", "STAR", "CLOUD", "RAINBOW",
    "MOUNTAIN", "RIVER", "OCEAN", "FOREST", "DESERT",
    "CAR", "TRAIN", "BICYCLE", "AIRPLANE", "BOAT",
    "PIZZA", "BURGER", "SUSHI", "PASTA", "BREAD",
    "FLOWER", "TREE", "GRASS", "ROSE", "TULIP"
};
    string secretWord = "";
    HashSet<char> guessedLetters = new();
    string displayWord = "";
    int wrongGuesses = 0;
    int maxWrongGuesses = 6;
    string currentGuess = "";
    string message = "";
    bool gameOver = false;

    protected override void OnInitialized()
    {
        RestartGame();
    }

    void MakeGuess()
    {
        if (string.IsNullOrWhiteSpace(currentGuess) || gameOver) return;
        char guess = char.ToUpper(currentGuess[0]);
        currentGuess = "";

        if (guessedLetters.Contains(guess))
        {
            message = $"You already guessed '{guess}'!";
            return;
        }

        guessedLetters.Add(guess);

        if (!secretWord.Contains(guess))
        {
            wrongGuesses++;
            message = "Wrong!";
        }
        else
        {
            message = "Correct!";
        }

        UpdateDisplay();

        if (displayWord.Replace(" ", "") == secretWord)
        {
            message = "🎉 You guessed it!";
            gameOver = true;
        }
        else if (wrongGuesses >= maxWrongGuesses)
        {
            message = $"😢 Game Over! The word was {secretWord}";
            gameOver = true;
        }
    }

    void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e?.Key == "Enter")
        {
            MakeGuess();
        }
    }

    void RestartGame()
    {
        Random rand = new();
        secretWord = wordList[rand.Next(wordList.Length)];
        guessedLetters.Clear();
        wrongGuesses = 0;
        message = "";
        gameOver = false;
        UpdateDisplay();
    }

    IEnumerable<char> CorrectGuesses => guessedLetters.Where(c => secretWord.Contains(c)).OrderBy(c => c);
    IEnumerable<char> WrongGuessesList => guessedLetters.Where(c => !secretWord.Contains(c)).OrderBy(c => c);

    void UpdateDisplay()
    {
        displayWord = "";
        foreach (char c in secretWord)
        {
            displayWord += guessedLetters.Contains(c) ? $"{c} " : "_ ";
        }
    }
}
